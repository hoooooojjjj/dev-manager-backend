---
alwaysApply: true
---

This file provides guidance to Cursor when working with code in this repository.

You should think in English but speak in Korean.

## Project Overview

This is a NestJS backend service (dev-manager-backend) that integrates with the Anthropic AI SDK. The application runs on port 3333 by default and has CORS configured for a Vercel frontend deployment and local development.

You are a senior TypeScript programmer with experience in the NestJS framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Basic Principles

- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Use JSDoc to document public classes and methods.
- Don't leave blank lines within a function.
- One export per file.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Testing

- Follow the Arrange-Act-Assert convention for tests.
- Name test variables clearly.
  - Follow the convention: inputX, mockX, actualX, expectedX, etc.
- Write unit tests for each public function.
  - Use test doubles to simulate dependencies.
    - Except for third-party dependencies that are not expensive to execute.
- Write acceptance tests for each module.
  - Follow the Given-When-Then convention.

## Specific to NestJS

### Basic Principles

- Use modular architecture
- Encapsulate the API in modules.
  - One module per main domain/route.
  - One controller for its route.
    - And other controllers for secondary routes.
  - A models folder with data types.
    - DTOs validated with class-validator for inputs.
    - Declare simple types for outputs.
  - A services module with business logic and persistence.
    - Entities with MikroORM for data persistence.
    - One service per entity.
- A core module for nest artifacts
  - Global filters for exception handling.
  - Global middlewares for request management.
  - Guards for permission management.
  - Interceptors for request management.
- A shared module for services shared between modules.
  - Utilities
  - Shared business logic

### Testing

- Use the standard Jest framework for testing.
- Write tests for each controller and service.
- Write end to end tests for each api module.
- Add a admin/test method to each controller as a smoke test.

## Commands

### Development

- `npm run start:dev` - Start development server with hot reload
- `npm run start:debug` - Start with debugging enabled
- `npm start` - Start without watch mode

### Building

- `npm run build` - Build the project (outputs to dist/)

### Testing

- `npm test` - Run all unit tests
- `npm run test:watch` - Run tests in watch mode
- `npm run test:cov` - Run tests with coverage report
- `npm run test:e2e` - Run end-to-end tests
- `npm run test:debug` - Run tests with Node debugger

### Code Quality

- `npm run lint` - Lint and auto-fix TypeScript files
- `npm run format` - Format code with Prettier

### Production

- `npm run start:prod` - Run production build (requires `npm run build` first)

### Docker

**Prerequisites**:

- Create `.env` file in the project root (copy from `.env.example` and fill in your values)
- Make sure Docker Desktop is running

All Docker commands should be run from the `docker/` directory:

```bash
cd docker
make [command]
```

**Development Commands:**

- `make help` - Show all available commands
- `make dev` or `make up` - Start development environment with hot reload
- `make build-dev` - Build development Docker images
- `make logs` - View all logs
- `make logs-app` - View application logs only
- `make logs-db` - View database logs only
- `make down` - Stop development environment
- `make restart` - Restart development environment
- `make rebuild-dev` - Rebuild and restart development

**Production Commands:**

- `make prod` - Start production environment
- `make build-prod` - Build production Docker images
- `make logs-prod` - View production logs
- `make down-prod` - Stop production environment
- `make restart-prod` - Restart production environment
- `make rebuild-prod` - Rebuild and restart production

**Utility Commands:**

- `make ps` - List running containers
- `make shell-app` - Open shell in app container
- `make shell-db` - Open MySQL shell
- `make clean` - Remove all containers and volumes (dangerous!)

**Important**:

- Development mode runs with hot reload - code changes in `src/` are automatically reflected
- Both MySQL and NestJS application run in Docker containers
- Development uses `docker-compose.dev.yml` and production uses `docker-compose.prod.yml`

## Architecture

### Core Structure

- **Entry Point**: [src/main.ts](src/main.ts) - Bootstraps NestJS app, configures CORS for production (`https://dev-manager-frontend.vercel.app`) and local (`http://localhost:3000`)
- **Module System**: Standard NestJS module/controller/service architecture
- **Root Module**: [src/app.module.ts](src/app.module.ts) - Main application module
- **Controller**: [src/app.controller.ts](src/app.controller.ts) - HTTP endpoints
- **Service**: [src/app.service.ts](src/app.service.ts) - Business logic

### TypeScript Configuration

- Uses `nodenext` module resolution for modern ESM/CommonJS interop
- Decorators enabled for NestJS
- Strict null checks enabled, but `noImplicitAny` is disabled
- Output directory: `dist/`

### Database

- **ORM**: TypeORM with MySQL2 driver
- **Configuration**: Database settings in [src/app.module.ts]
- **Entities**: Located in `src/entities/` with `.entity.ts` suffix
- **Synchronization**: Auto-sync enabled in development (disabled in production)
- **Environment Variables**: Database credentials in `.env` (DB_HOST, DB_PORT, DB_USERNAME, DB_PASSWORD, DB_DATABASE)
- **Docker Setup**: MySQL 8.0 runs in a Docker container. In Docker environment, `DB_HOST` is automatically set to `mysql` (container name). For local development without Docker, use `DB_HOST=127.0.0.1`.

### External Integrations

- **Anthropic AI SDK** (`@anthropic-ai/sdk`) - AI capabilities integration
- **Environment Variables**: Uses `dotenv` for configuration (API keys stored in `.env`)

### Testing Setup

- Unit tests: Jest with `.spec.ts` suffix in `src/`
- E2E tests: Separate Jest config at [test/jest-e2e.json](test/jest-e2e.json)
- Coverage output: `coverage/` directory

## Notes

- The application uses NestJS CLI for scaffolding (`@nestjs/schematics`)
- CORS is pre-configured - update origins in [src/main.ts](src/main.ts:6-12) if adding new frontends
